import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class labirynt extends JFrame {
    private JPanel drawPanel;
    private JButton openButton;
    private char[][] fileContent;

    public labirynt() {
        // Ustawienia głównego okna
        setTitle("Swing File App");
        setSize(800, 800);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Tworzenie panelu głównego
        JPanel panel = new JPanel(new BorderLayout());

        // Tworzenie panelu do rysowania
        drawPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (fileContent != null) {
                    drawFileContent(g);
                }
            }
        };
        panel.add(drawPanel, BorderLayout.CENTER);

        // Tworzenie i dodanie przycisku
        openButton = new JButton("Otwórz plik");

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(openButton);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        // Dodanie panelu do głównego okna
        add(panel);

        // Obsługa zdarzeń przycisków
        openButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openTextFile();
            }
        });
    }

    private void openTextFile() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;
                int rows = 0;
                int cols = 0;
                while ((line = br.readLine()) != null) {
                    rows++;
                    cols = Math.max(cols, line.length());
                }

                fileContent = new char[rows][cols];
                try (BufferedReader br2 = new BufferedReader(new FileReader(file))) {
                    int row = 0;
                    while ((line = br2.readLine()) != null) {
                        for (int col = 0; col < line.length(); col++) {
                            fileContent[row][col] = line.charAt(col);
                        }
                        row++;
                    }
                }

                drawPanel.repaint();
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Błąd podczas otwierania pliku", "Błąd", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void drawFileContent(Graphics g) {
        int cellSize = 10; // Rozmiar kwadratów
        for (int a = 0; a < fileContent.length; a++) {
            for (int b = 0; b < fileContent[a].length; b++) {
                char c = fileContent[a][b];
                if (c == 'X') {
                    g.setColor(Color.BLACK);
                    g.fillRect(b * cellSize, a * cellSize, cellSize, cellSize);
                } else if (c == ' ') {
                } else if (c == '.' || c=='K') {
                    g.setColor(Color.RED);
                    g.fillRect(b * cellSize, a * cellSize, cellSize, cellSize);
                }
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                labirynt app = new labirynt();
                app.setLocationRelativeTo(null); // Centrowanie okna na ekranie
                app.setVisible(true);
            }
        });
    }
}

